<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liangsj.xyz/</id>
    <title>Liangsj</title>
    <updated>2019-07-05T08:17:02.755Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liangsj.xyz/"/>
    <link rel="self" href="https://liangsj.xyz//atom.xml"/>
    <subtitle>个人博客</subtitle>
    <logo>https://liangsj.xyz//images/avatar.png</logo>
    <icon>https://liangsj.xyz//favicon.ico</icon>
    <rights>All rights reserved 2019, Liangsj</rights>
    <entry>
        <title type="html"><![CDATA[hadoop 高可用配置]]></title>
        <id>https://liangsj.xyz//post/hadoop-gao-ke-yong-pei-zhi</id>
        <link href="https://liangsj.xyz//post/hadoop-gao-ke-yong-pei-zhi">
        </link>
        <updated>2019-07-05T08:16:15.000Z</updated>
        <content type="html"><![CDATA[<p>Hadoop1,只有一个NameNode，不可靠，容易单点故障。</p>
<p>Hddoop2后，使用高可用，可配置2个NameNode，一个活动，一个备用，
Hddoop2后，使用高可用，可配置2个NameNode，一个活动，一个备用，</p>
<p>当活动NameNode出现问题时，备用NameNode可手工或自动切换为活动状态</p>
<p>下面配置高可用:</p>
<p><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_hag_hdfs_ha_config.html">官方文档</a></p>
<h3 id="增加开启高可用">增加开启高可用</h3>
<p>1、在Cloudera Manager界面，进入HDFS服务，</p>
<p>2、操作-&gt; 启用High Availability</p>
<p>3、选择外一台配置与NameNode差不多的结点，安装NameNode服务，并安装JournalNode(至少安装到三台结点)</p>
<p>成功后为这样</p>
<p><img src="https://liangsj.xyz//post-images/1562314595351.png" alt=""></p>
<h3 id="配置hive和huehbase等">配置HIVE和hue,hbase等</h3>
<p><a href="https://www.cloudera.com/documentation/enterprise/latest/topics/cdh_hag_hdfs_ha_cdh_components_config.html#concept_rj1_hsq_bp">官方文档</a></p>
<p>高可用后，需要重新配置HIVE和hue,hbase 等，这里只用到了hue和hive</p>
<ul>
<li>更新hive配置</li>
</ul>
<p>1、进入hive服务页面</p>
<p>2、操作 -&gt; 停止</p>
<p>3、操作 -&gt; Update Hive Metastore NameNodes</p>
<p>4、操作 -&gt; 启动</p>
<ul>
<li>配置Hue Web使用HttpFs</li>
</ul>
<p>1、在HDFS服务页面增加HttpFS角色</p>
<p>2、进入Hue服务</p>
<p>3、配置 -&gt; Hue Web界面角色，选择HttpFs</p>
<p>如下
<img src="https://liangsj.xyz//post-images/1562314608435.png" alt=""></p>
<p>4、重启Hue服务</p>
<p>完成</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yarn(MapReduce2.0)架构的资源请求流程]]></title>
        <id>https://liangsj.xyz//post/yarnmapreduce20jia-gou-de-zi-yuan-qing-qiu-liu-cheng</id>
        <link href="https://liangsj.xyz//post/yarnmapreduce20jia-gou-de-zi-yuan-qing-qiu-liu-cheng">
        </link>
        <updated>2019-07-05T07:57:26.000Z</updated>
        <content type="html"><![CDATA[<p>最近整理在做MapReduce开发，对Yarn的请求流程做些简单的整理，以防忘记。</p>
<p>MR1主要由JobTracker和TaskTacker组成，Yarn由ResourceManager、NodeManager、ApplicationMaster组成</p>
<p>以下是自己画的yarn流程图</p>
<p><img src="https://liangsj.xyz//post-images/1562313561494.png" alt=""></p>
<h3 id="一些词的解析">一些词的解析</h3>
<p><strong>ResourceManager：</strong> 集群老大，有最高权力，相当于老总，管理着整个集群的资源，谁要使用，都要先经过他。</p>
<ul>
<li>1、全局的资源管理器，负责整个系统的资源管理和分配。</li>
<li>2、它主要由两个组件构成：调度器（Scheduler）和应用程序管理器（Applications Manager，ASM）</li>
</ul>
<p><strong>NodeManager：</strong> 一台机器上的老大，当台机器上的管理者。相当于部分经理。</p>
<ul>
<li>1、每个节点上的资源和任务管理器。</li>
<li>2、定时地向RM汇报本节点上的资源使用情况和各个Container的运行状态；</li>
<li>3、接收并处理来自AM的Container启动/停止等各种请求</li>
</ul>
<p><strong>ApplicationMaster：</strong> 中间者，每个应用程序一个AM</p>
<ul>
<li>1、获取资源(用Container表示)</li>
<li>2、将得到的任务进一步分配给内部的任务(资源的二次分配)；</li>
<li>3、与NM通信以启动/停止任务；</li>
<li>4、监控所有任务运行状态，并在任务运行失败时重新为任务申请资源以重启任务</li>
</ul>
<p><strong>Container：</strong> 是YARN中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等</p>
<h3 id="流程">流程</h3>
<ul>
<li>
<p>1、用户向yarn提交程序，即Mapredeuce程序，ResourceManager(资源管理器)接收到客户端MR运行请求</p>
</li>
<li>
<p>2、ResourceManager分配一个Container(资源)用来启动ApplicationMaster(程序管理员)，并告知NodeManager(节点管理员)，要求它在这个Container下启动ApplicationMaster</p>
</li>
<li>
<p>3、ApplicationMaster启动后，向ResourceManager发起注册请求</p>
</li>
<li>
<p>4、ApplicationMaster向ResourceManager申请资源</p>
</li>
<li>
<p>5、取得资源后，根据资源，向相关的NodeManager通信，要求其启动程序</p>
</li>
<li>
<p>6、NodeManager（多个）启动MR</p>
</li>
<li>
<p>7、NodeManager不断汇报MR状态和进展给ApplicationMaster</p>
</li>
<li>
<p>8、当MR全部完成时，ApplicationMaster向ResourceManager汇报任务完成，并注销自己</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git在windows下安装与使用]]></title>
        <id>https://liangsj.xyz//post/git-zai-windows-xia-an-zhuang-yu-shi-yong</id>
        <link href="https://liangsj.xyz//post/git-zai-windows-xia-an-zhuang-yu-shi-yong">
        </link>
        <updated>2019-07-05T07:22:51.000Z</updated>
        <content type="html"><![CDATA[<p>github桌面程序 使用过一段时间，太慢了，而且在家还安装不了，所以还是git命令好用，记录下安装和使用过程</p>
<h3 id="安装git客户端">安装Git客户端</h3>
<ul>
<li>
<p>到<a href="https://git-scm.com/downloads">git官网</a>下载git，并安装</p>
</li>
<li>
<p>GitHub上添加 SSH key</p>
<p>打开git bash，执行如下命令</p>
</li>
</ul>
<pre><code>$cd ~/.ssh    --没有则创建
$ssh-keygen -t rsa -b 4096 -C &quot;trgree@foxmail.com&quot;       --并连续按3个enter
</code></pre>
<p>复制~/.ssh目录下id_rsa.pub内容到github的ssh设置</p>
<p>位置： settings -&gt; SSH and GPG keys -&gt; new SSH key</p>
<p>测试连接是否成功</p>
<pre><code>$ssh -T git@github.com
</code></pre>
<p>输入yes，
如果出现以下提示证明添加成功</p>
<pre><code>Hi Trgree! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>
<ul>
<li>设置git</li>
</ul>
<pre><code>$git config --global user.name &quot;trgree&quot;                  # 请换成你自己的名字，除非你凑巧也叫wukong.sun 
$git config --global user.email &quot;trgree@foxmail.com&quot;         # 同上 
$git config --global push.default simple               # 要是你非要用低版本的Git（比如1.7.x），好吧，那就不设simple设current，否则你的Git不支持 
$git config --global core.autocrlf false               # 让Git不要管Windows/Unix换行符转换的事 
$git config --global gui.encoding utf-8                # 避免git gui中的中文乱码 
$git config --global core.quotepath off                # 避免git status显示的中文文件名乱码 
</code></pre>
<h3 id="克隆项目到本地">克隆项目到本地</h3>
<p>在github上获取项目git路径</p>
<pre><code>$git clone https://github.com/Trgree/trgree.github.io.git trgree.github.io
</code></pre>
<h3 id="查看文件状态有哪些文件是需要提交的">查看文件状态，有哪些文件是需要提交的</h3>
<pre><code>$cd trgree.github.io
$git status
</code></pre>
<p><img src="https://liangsj.xyz//post-images/1562311483071.png" alt=""></p>
<h3 id="添加要提交文件到缓存中">添加要提交文件到缓存中</h3>
<pre><code>$git add _posts/*
$git add images/posts/git-mark/pic1.png
$git add .   #当前目录下所有文件
$git commit -m 'add git-mark'
</code></pre>
<h3 id="提交修改后文件到github上">提交修改后文件到github上</h3>
<pre><code>$git push
</code></pre>
<p>输入用户密码即可。</p>
<p>但每次push都要输入用户密码，很麻烦，可以把push修改为ssh方式，则不用输入（前提是添加了ssh key到github，见前面）</p>
<p>通过以下命令查看</p>
<pre><code>git remote -v
</code></pre>
<p>返回</p>
<pre><code>origin  https://github.com/Trgree/trgree.github.io.git (fetch)
origin  https://github.com/Trgree/trgree.github.io.git (push)
</code></pre>
<p>修改为ssh</p>
<pre><code>git remote rm origin
git remote add origin git@github.com:Trgree/trgree.github.io.git
git push --set-upstream origin master
</code></pre>
<h3 id="更新远程文件到本地">更新远程文件到本地</h3>
<pre><code>$git pull
</code></pre>
]]></content>
    </entry>
</feed>